---
title: "Estimation of Ideal Points Using Cast Vote Records"
subtitle: "Quant III and Bayesian Measurement"
date: today
date-format: long
embed-resources: true
bibliography: references.bib
suppress-bibliography: true
author: "Mason Reece"
cache: true
echo: false
format:
  revealjs:
    smaller: true
    progress: false
    theme: ["medsl.scss"]
    slide-number: c
    css: medsl.css
    footer: "Reece -- CVR Ideals"
    fig-cap-location: top
    fig-responsive: true
    incremental: true
  beamer:
    theme: metropolis
    include-in-header: metropolis_options_mit.tex
---

## Introduction

```{r}
#| output: false
#| cache: false

set.seed(02139)

library(patchwork)
library(tidyverse)
library(brms)
library(tidybayes)
library(bayesplot)
library(targets)

```

How representative is a government of its people?

<div>

-   One approach (of many) compares the "ideological" positions of legislators and voters \pause
    -   For legislators: roll-call votes [@poole_patterns_1991], campaign contributions [@bonica_mapping_2014; @bonica_inferring_2018], tweets [@barberá2015], etc. \pause
    -   For voters: surveys [e.g., @bafumi_leapfrog_2010] and **cast vote records (CVRs)** [@lewis2001] \pause
        -   I focus on CVRs because they have the most complete information and let us answer questions about down-ballot races

</div>

## Cast Vote Records

::: {layout="[10,8]"}
![](figs/pres_ballot.jpg){fig-align="left" width="543"}

-   Anonymous records of what candidate each voter picked in each race on the ballot \pause

-   Modelling challenges

    -   Categorical outcome with different options for each race

    -   People vote in different races \pause

-   1.3B "bubbles" and 50m voters in 2020 election
:::

## Distribution of Cast Vote Records

![](writing/images/county_map2.jpeg)

## Methodology - IRT Model

```{=tex}
\begin{align*}
\onslide<1->{Y_{jk} & \sim \text{Bernoulli}(\pi_{jk}) &\text{ or } & \hfill Y_{j, k(c)} \sim \text{Categorical}(\pi_{j, k(c)}) \\}
\onslide<2->{\pi &= logit^{-1} ( \nu_{jk} ) &\text{ or } & \hfill softmax( \nu_{j, k(c)}) \\}
\onslide<3->{\nu &= \gamma_k \alpha_j - \beta_k &\text{ or } & \hfill \gamma_{k(c)} \alpha_j - \beta_{k(c)}}
\end{align*}
```
| Quantity                       | Symbol           |
|--------------------------------|------------------|
| Individual                     | $j = 1, 2, …, J$ |
| Race                           | $k = 1, 2, …, K$ |
| Candidate                      | $c = 1, 2, …, C$ |
| Ideal point of voter $j$       | $\alpha$         |
| Discrimination/Slope Parameter | $\gamma$         |
| Difficulty/Location Parameter  | $\beta$          |

## Identification and Priors

-   The scale and location of $\alpha$ are unidentified (can add or multiply a constant with no change in likelihood) \pause

    -   Set prior to $\mathcal{N}(0, 1)$ and post-process draws \pause

-   $\gamma$'s sign can also flip around with relation to the sign of $\alpha$. \pause

    -   Constrain $\gamma > 0$ for Bernoulli models
    -   Post-process draws for Categorical models \pause

-   Priors

    -   Uninformative, standard priors for other parameters

    -   Future work: Informative priors using party or NOMINATE/DIME scores to help with identification and speed convergence

## Convergence

![](figs/rhat_comparison.jpg)

## Bernoulli Results - $\alpha$

```{r}

ber_1pl <- readRDS("fits/bernoulli_rasch.rds")
ber_2pl <- readRDS("fits/bernoulli_2pl.rds")

p1 <- ber_1pl |>
 spread_draws(r_cvr_id[cvr_id, var]) |>
 mutate(alpha = r_cvr_id/sd(r_cvr_id)) |>
 filter(cvr_id < 50) |> 
 ggplot(aes(x = alpha, y = as.character(cvr_id))) +
 stat_halfeye() +
 theme_bw() +
 geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
 labs(x = expression(alpha), y = "Voter", title = "Bernoulli Rasch Model -- Latent Trait")

p2 <- ber_2pl |> 
  spread_draws(r_cvr_id__alpha[cvr_id,]) |> 
  mutate(alpha = r_cvr_id__alpha/sd(r_cvr_id__alpha)) |> 
  filter(cvr_id < 50) |> 
  ggplot(aes(x = alpha, y = as.character(cvr_id))) +
  stat_halfeye() +
  theme_bw() +
  geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
  labs(x = expression(alpha), y = "", title = "Bernoulli 2PL Model -- Latent Trait")

p1 + p2 & scale_x_continuous(limits = c(-6, 6))
```

## Binary Results - $\beta$ and $\gamma$

```{r}

person_pars_2pl <- ranef(ber_2pl, summary = FALSE)$cvr_id[, , "alpha_Intercept"] 
person_sds_2pl <- apply(person_pars_2pl, 1, sd)
item_pars_2pl <- coef(ber_2pl, summary = FALSE)$race
  
# locations
beta <- item_pars_2pl[, , "beta_Intercept"] |>
  as_tibble() |> 
  pivot_longer(cols = everything(), names_to = "race") |> 
  mutate(race = str_remove(race, fixed(", ")) |> str_squish()) |> 
  mutate(nlpar = "beta")

random_races <- beta |> 
  distinct(race) |> 
  slice_sample(n=12) |> 
  bind_rows(tibble(race = c("US PRESIDENT - STATEWIDE", "US SENATE - STATEWIDE"))) |> 
  distinct(race)

# slopes
gamma <- item_pars_2pl[, , "loggamma_Intercept"] |>
  sweep(1, person_sds_2pl, "*") |>
  as_tibble() |> 
  pivot_longer(cols = everything(), names_to = "race") |> 
  mutate(nlpar = "gamma") |> 
  mutate(race = str_remove(race, fixed(", ")) |> str_squish()) 

bind_rows(beta, gamma) |>
  inner_join(random_races) |> 
  mutate(nlpar = factor(nlpar, labels = c("Difficulty", "Discrimination"))) |> 
  ggplot(aes(x = value, y = race)) +
  stat_pointinterval() +
  geom_vline(xintercept = 0, color = "blue", linetype = "dashed") +
  facet_wrap(~ nlpar, scales = "free_x") +
  labs(y = "", x = "") +
  theme_bw()

```

## Categorical Results -- $\alpha$

```{r}

cat_2pl <- readRDS("fits/cat_2pl_unrestricted.rds")

gamma_signs <- as_draws_df(cat_2pl) |>
  select(matches("^gamma\\[")) |>
  rowMeans() |>
  sign()

cat_2pl <- as_draws_df(cat_2pl) |>
  mutate(across(matches("(^alpha\\[)|(^gamma\\[)"), ~ gamma_signs * .))

cat_2pl |> 
  spread_draws(alpha[cvr_id]) |> 
  ungroup() |> 
  mutate(alpha = (alpha - mean(alpha))/sd(alpha)) |> 
  filter(cvr_id < 15) |> 
  ggplot(aes(x = alpha, y = as.character(cvr_id))) +
  stat_halfeye() +
  theme_bw() +
  geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
  labs(x = expression(alpha), y = "Voter", title = "Categorical 2PL Model -- Latent Trait")
```

## Categorical Results -- $\alpha$

```{r}

data <- tar_read(data_base_adams) |> 
  # propositions are not quite right
  mutate(candidate = case_when(
    str_detect(race, "PROPOSITION") ~ str_c(race, candidate, sep = " - "),
    TRUE ~ candidate
  ),
  race = str_remove(race, ", "))

# Assign unique IDs to races and candidates
races <- data |> 
  distinct(race) |> 
  arrange(race) |> 
  mutate(race_id = row_number())

candidates <- data |> 
  distinct(race, candidate) |> 
  arrange(race, candidate) |>
  select(candidate) |>
  mutate(candidate_id = row_number())

# Join back to the original data
df <- data |> 
  left_join(races, by = "race") |> 
  left_join(candidates, by = "candidate")

# some races are not classified perfectly in districts rn so they would show up as list-columns (bad)
bad_races <- df |> 
  count(cvr_id, race_id) |> 
  filter(n > 1) |> 
  distinct(race_id) |> 
  pull(race_id)

df <- df |> 
  filter(!(race_id %in% bad_races)) |>
  drop_na(race_id, candidate_id)

votes_matrix <- df |> 
  mutate(trump_voter = ifelse(race == "US PRESIDENT - STATEWIDE" & candidate == "DONALD J TRUMP", 1, 0), .by = cvr_id) |> 
  select(cvr_id, race_id, candidate_id, trump_voter) |> 
  arrange(race_id, candidate_id) |>
  pivot_wider(names_from = race_id, values_from = candidate_id, values_fill = 0) |> 
  select(cvr_id, trump_voter) |> 
  mutate(id = row_number())

pres_choices <- df |> 
  filter(office == "US PRESIDENT") |> 
  distinct(cvr_id, candidate) |> 
  filter(candidate %in% c(
    "KANYE WEST",
    "JOSEPH R BIDEN",
    "JO JORGENSEN",
    "HOWIE HAWKINS",
    "GLORIA LA RIVA",
    "DONALD J TRUMP"
  ))

voters <- df |> 
  select(cvr_id, race_id, candidate_id) |> 
  arrange(race_id, candidate_id) |> 
  distinct(cvr_id) |> 
  mutate(id = row_number()) |> 
  left_join(pres_choices)

cat_2pl |> 
  spread_draws(alpha[id]) |> 
  ungroup() |> 
  mutate(alpha = alpha/sd(alpha)) |> 
  left_join(voters, join_by(id)) |> 
  drop_na(candidate) |> 
  ggplot(aes(x = alpha, fill = candidate, y = candidate)) +
  ggridges::geom_density_ridges() +
  theme_bw() +
  geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
  labs(x = expression(alpha), y = "", fill = "", title = "Categorical 2PL Model -- By Presidential Vote")

```

## Categorical Results - $\beta$ and $\gamma$

```{r}

sds <- cat_2pl |> 
  spread_draws(alpha[cvr_id]) |> 
  ungroup() |> 
  summarise(sd = sd(alpha), .by = ".draw") |> 
  pull(sd)

draws <- cat_2pl |> 
  as_draws_df() |>
  select(starts_with("beta["), starts_with("gamma[")) |> 
  sweep(1, sds, "*") |> 
  mutate(across(everything(), ~ na_if(.x, 0))) |> 
  pivot_longer(cols = everything(), values_drop_na = TRUE) |> 
  separate_wider_delim(cols = name, delim = "[", names = c("parameter", "race_id")) |> 
  separate_wider_delim(cols = race_id, delim = ",", names = c("race_id", "candidate_id")) |> 
  mutate(candidate_id = str_remove(candidate_id, "]")) |> 
  mutate(race_id = as.numeric(race_id),
         candidate_id = as.numeric(candidate_id)) |>
  left_join(races) |> 
  left_join(candidates)

draws |> 
  filter(str_detect(race, "US PRESIDENT")) |> 
  mutate(race = str_remove(race, " - STATEWIDE")) |> 
  mutate(parameter = factor(parameter, labels = c("Difficulty", "Discrimination"))) |>
  ggplot(aes(x = value, y = candidate)) +
  stat_halfeye() +
  geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
  facet_wrap(~ parameter, scales = "free_x") +
  theme_bw() +
  labs(x = "", y = "", title = "Categorical 2PL Model -- Other Params")

```

## Future Work

-   Scaling the models up for the full data set

    -   Group voters together based on voting patterns

    -   Incorporate NOMINATE/DIME scores for informative priors or to connect these results better to a question of representation

    -   GPU computations \pause

-   Extension to races where a voter could choose more than one candidate \pause

-   Multiple dimensions

# Thank You!
